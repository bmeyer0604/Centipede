{"version":3,"sources":["webpack:///webpack/bootstrap 35c79e780dccf33abc9c","webpack:///./javascripts/src/util.js","webpack:///./javascripts/lib/laser.js","webpack:///./javascripts/lib/mushroom.js","webpack:///./javascripts/lib/centipede-segment.js","webpack:///./javascripts/lib/moving_object.js","webpack:///./javascripts/lib/flea.js","webpack:///./javascripts/lib/scorpion.js","webpack:///./javascripts/lib/spider.js","webpack:///./javascripts/src/index.js","webpack:///./javascripts/lib/game.js","webpack:///./javascripts/lib/game_view.js","webpack:///./javascripts/lib/player.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AC7DA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA,sB;;;;;;ACXA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uB;;;;;;AC7CA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,0B;;;;;;ACjEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,kC;;;;;;AC7JA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,8B;;;;;;ACvBA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sB;;;;;;ACnFA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,0B;;;;;;AC3EA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wB;;;;;;AC5FA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED,mB;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,QAAQ;AAC9B;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,uBAAuB;AAC7C,0BAA0B,uBAAuB;AACjD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA,uCAAuC,WAAW,WAAW,WAAW;AACxE,yCAAyC,YAAY;;AAErD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,yCAAyC,YAAY;AACrD;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sB;;;;;;ACxPA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,0B;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,a;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,a;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wB","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 35c79e780dccf33abc9c","const Util = {\n    inherits(childClass, parentClass) {\n    },\n\n    dist(pos1, pos2) {\n        return Math.sqrt(\n            Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2)\n        );\n    }\n}\n\nmodule.exports = Util;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./javascripts/src/util.js\n// module id = 0\n// module chunks = 0","const Util = require(\"../src/util\");\nconst MovingObject = require(\"./moving_object\");\n\nclass Laser {\n    constructor(context, canvasWidth, canvasHeight, player, game) {\n        this.context = context;\n        this.canvasWidth = canvasWidth;\n        this.canvasHeight = canvasHeight;\n        this.player = player;\n        this.game = game;\n        this.x = this.player.x + player.radius;\n        this.y = this.player.y + 2;\n        this.radius = 1;\n        this.velocityX = 0;\n        this.velocityY = 0.55;\n    }\n\n    draw(ctx) {\n        ctx.fillStyle = \"#FFFF00\";\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, 2, 0, 2* Math.PI);\n        // (x, y, radius, start angle, end angle)\n        ctx.fill();\n    }\n\n    isCollidedWith(otherObj) {\n        const centerDist = Util.dist([this.x, this.y], [otherObj.x, otherObj.y]);\n        return centerDist < (this.radius + otherObj.radius)\n    }\n\n    collideWith(otherObj) {\n    }\n\n    move() {\n            this.y -= this.velocityY;\n            if (this.y < 2) {\n                this.game.remove(this);\n            }\n    }\n\n    remove() {\n        this.game.remove(this);\n    }\n}\n\nmodule.exports = Laser;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./javascripts/lib/laser.js\n// module id = 1\n// module chunks = 0","const Laser = require(\"./laser\");\nconst Util = require(\"../src/util\");\n\nconst mushroom = new Image();\nmushroom.src = \"./images/mushroom.png\";\n\nclass Mushroom {\n    constructor(context, canvasWidth, canvasHeight, x, y, game) {\n        this.context = context;\n        this.canvasWidth = canvasWidth;\n        this.canvasHeight = canvasHeight;\n        this.game = game;\n\n        this.image = mushroom;\n        this.x = x;\n        this.y = y;\n        this.sourceWidth = 8;\n        this.sourceHeight = 8;\n        this.width = 28;\n        this.height = 28;\n        this.sourceX = 0;\n        this.sourceY = 0;\n        this.radius = 14;\n\n        this.poisoned = false;\n    }\n\n    draw(ctx) {\n        // (img, sx, sy, sw, sh, dx, dy, dw, dh)\n        this.context.drawImage(\n            this.image, this.sourceX, this.sourceY, this.sourceWidth, \n            this.sourceHeight, this.x, this.y, this.width, this.height\n        );\n    }\n\n    isCollidedWith(otherObj) {\n        const centerDist = Util.dist([this.x, this.y], [otherObj.x, otherObj.y]);\n        return centerDist < (this.radius + otherObj.radius)\n    }\n\n    collideWith(otherObj) {\n        if(otherObj instanceof Laser) {\n            otherObj.remove();\n            this.take_damage();\n        }\n    }\n\n    take_damage() {\n        if(this.sourceX < 16) {\n            this.sourceX += 8;\n        } else {\n            this.remove();\n            this.game.points += 1;\n            this.game.checkPoints();\n        }\n    }\n\n    move() {\n    }\n\n    remove() {\n        this.game.remove(this);\n    }\n}\n\nmodule.exports = Mushroom;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./javascripts/lib/mushroom.js\n// module id = 2\n// module chunks = 0","const Laser = require(\"./laser\");\nconst Mushroom = require(\"./mushroom\");\nconst Util = require(\"../src/util\");\n// Centipede segment\n\nconst segment = new Image();\nsegment.src = \"./images/centipede-body.png\";\nconst segmentReverse = new Image();\nsegmentReverse.src = \"./images/centipede-body-reverse.png\";\nconst segmentDown = new Image();\nsegmentDown.src = \"./images/centipede-down.png\";\nconst headSeg = new Image();\nheadSeg.src = \"./images/centipede-head.png\";\nconst headSegReverse = new Image();\nheadSegReverse.src = \"./images/centipede-head-reverse.png\";\nconst headDown = new Image();\nheadDown.src = \"./images/head-down.png\";\n\nconst centipedeDeath = new Audio(\"./sfx/centipedeDeath.mp4\");\n\nclass CentipedeSegment {\n    constructor(context, canvasWidth, canvasHeight, x, y, game, head=false) {\n        this.context = context;\n        this.canvasWidth = canvasWidth;\n        this.canvasHeight = canvasHeight;\n        this.game = game;\n        this.head = false;\n\n        this.velocityX = .15;\n        this.velocityY = 25;\n\n        this.x = x;\n        this.y = y;\n        this.sourceWidth = 8;\n        this.sourceHeight = 8;\n        this.width = 24;\n        this.height = 24;\n        this.sourceX = 0;\n        this.sourceY = 0;\n        this.radius = 12;\n\n        this.angry = false;\n        this.head = head;\n\n        if(this.head) {\n            this.image = headSeg;\n        } else {\n            this.image = segment;\n        }\n\n        this.frames = 0;\n    }\n\n    draw() {\n        this.frames += 1;\n        if(this.angry) {\n            if(this.frames % 150 === 0) {\n                this.frames = 0;\n                this.sourceX = 0;\n                this.sourceY = (this.sourceY + this.sourceHeight) % 16;\n            }\n        } else {\n            if(this.frames === 300) {\n                this.frames = 0;\n                this.sourceY = 0;\n                this.sourceX = (this.sourceX + this.sourceWidth) % 32;\n            }\n        }\n        // (img, sx, sy, sw, sh, dx, dy, dw, dh)\n        this.context.drawImage(\n            this.image, this.sourceX, this.sourceY, this.sourceWidth, \n            this.sourceHeight, this.x, this.y, this.width, this.height\n        );\n    }\n\n    move() {\n            if(this.angry) this.y += this.velocityY;\n            \n            this.x += this.velocityX;\n            if (this.y < 0) {\n                this.y = 0;\n                this.velocityY = -this.velocityY;\n            } else if (this.y > this.canvasHeight - 24) {\n                this.y = this.canvasHeight - 24;\n                this.velocityY = -25;\n                this.velocityX = .15;\n                this.angry = false;\n                this.head ? this.image = headSeg : this.image = segment;\n            } else if (this.x < 15) {\n                if(this.angry) {\n                    this.y += this.velocityY;\n                } else {\n                    this.x = 15;\n                    this.y += this.velocityY;\n                    this.velocityX = -this.velocityX;\n                    this.head ? this.image = headSeg : this.image = segment;\n                }\n            } else if (this.x > this.canvasWidth - 15) {\n                if(this.angry) {\n                    this.y += this.velocityY;\n                } else {\n                    this.x = this.canvasWidth - 15;\n                    this.y += this.velocityY;\n                    this.velocityX = -this.velocityX;\n                    this.head ? this.image = headSegReverse : this.image = segmentReverse;\n                }\n            }\n    }\n\n    isCollidedWith(otherObj) {\n        const centerDist = Util.dist([this.x, this.y], [otherObj.x, otherObj.y]);\n        return centerDist < (this.radius + otherObj.radius)\n    }\n\n    collideWith(otherObj) {\n        if(otherObj instanceof Laser) {\n            otherObj.remove();\n            this.remove();\n            centipedeDeath.play();\n            this.head ? this.game.points += 100 : this.game.points += 10;\n            this.game.checkPoints();\n        } else if(otherObj instanceof Mushroom) {\n            if(otherObj.poisoned) {\n                this.angry = true;\n                this.head ? this.image = headDown : this.image = segmentDown;\n                this.velocityY = .4;\n                this.velocityX = 0;\n            } else if(this.angry) {\n                this.y += this.velocityY;\n            } else {\n                this.y += this.velocityY;\n                this.velocityX = -this.velocityX;\n                if(otherObj.x < this.x) {\n                    this.head ? this.image = headSeg : this.image = segment;\n                    this.x = otherObj.x + otherObj.width + 1;\n                } else if(otherObj.x > this.x) {\n                    this.head ? this.image = headSegReverse : this.image = segmentReverse;\n                    this.x = otherObj.x - this.width - 1;\n                } else if(otherObj.y > this.y + this.height) {\n                    this.y = otherObj.y + this.height + 1;\n                }\n            }\n        } else if(otherObj instanceof CentipedeSegment && !this.angry && !otherObj.angry) {\n            if(otherObj.x > this.x && this.velocityX < 0) {\n                this.x = otherObj.x - this.width - 1;\n            } else if(otherObj.x < this.x && this.velocityX > 0) {\n                this.x = otherObj.x + otherObj.width + 1;\n            }\n        }\n    }\n\n    remove() {\n        this.game.mushrooms.push(new Mushroom(this.context, this.canvasWidth, this.canvasHeight, this.x, this.y, this.game));\n        this.game.remove(this);\n    }\n}\n\nmodule.exports = CentipedeSegment;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./javascripts/lib/centipede-segment.js\n// module id = 3\n// module chunks = 0","class MovingObject {\n    constructor(options) {\n        this.pos = options.pos;\n        this.vel = options.vel;\n        this.radius = options.radius;\n        this.color = options.color;\n    }\n\n    draw(ctx) {\n        ctx.fillStyle = this.color;\n        ctx.beginPath();\n        ctx.arc(95,50,40,0,2* Math.PI);\n        ctx.fill();\n    }\n\n    move() {\n        offsetX = this.vel[0];\n        offsetY = this.vel[1];\n\n        this.pos = [this.pos[0] + offsetX, this.pos[1] + offsetY];\n    }\n}\n\nmodule.exports = MovingObject;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./javascripts/lib/moving_object.js\n// module id = 4\n// module chunks = 0","const Laser = require(\"./laser\");\nconst Mushroom = require(\"./mushroom\");\nconst Util = require(\"../src/util\");\n\nconst flea = new Image();\nflea.src = \"./images/flea.png\";\n\nconst bugDeath = new Audio(\"./sfx/bugDeath.mp4\");\n\nclass Flea {\n    constructor(context, canvasWidth, canvasHeight, x, y, game) {\n        this.context = context;\n        this.canvasWidth = canvasWidth;\n        this.canvasHeight = canvasHeight;\n        this.game = game;\n\n        this.image = flea;\n        this.x = x;\n        this.y = y;\n        this.sourceWidth = 9;\n        this.sourceHeight = 8;\n        this.width = 27;\n        this.height = 24;\n        this.sourceX = 0;\n        this.sourceY = 0;\n        this.radius = 14;\n\n        this.velocityY = .5;\n        this.slow = true;\n\n        this.frames = 0;\n    }\n\n    draw() {\n        this.frames += 1;\n        if(this.frames === 300) {\n            this.frames = 0;\n            this.sourceY = (this.sourceY + this.sourceHeight) % 16\n        }\n        // (img, sx, sy, sw, sh, dx, dy, dw, dh)\n        this.context.drawImage(\n            this.image, this.sourceX, this.sourceY, this.sourceWidth, \n            this.sourceHeight, this.x, this.y, this.width, this.height\n        );\n    }\n\n    move() {\n        this.y += this.velocityY;\n        let randNum = Math.floor(Math.random() * 1400);\n        if((randNum === 13) && this.y < 930 && this.y > 300) {\n            this.game.mushrooms.push(new Mushroom(this.context, this.canvasWidth, this.canvasHeight, this.x, this.y, this.game))\n        }\n        if (this.y > this.canvasHeight - 15) {\n            this.remove();\n        }\n    }\n\n    isCollidedWith(otherObj) {\n        const centerDist = Util.dist([this.x, this.y], [otherObj.x, otherObj.y]);\n        return centerDist < (this.radius + otherObj.radius)\n    }\n\n    collideWith(otherObj) {\n        if(otherObj instanceof Laser) {\n            if(this.slow) {\n                otherObj.remove();\n                this.slow = false;\n                this.velocityY *= 2.3;\n            } else {\n                otherObj.remove();\n                this.remove();\n                bugDeath.play();\n                this.game.points += 200;\n                this.game.checkPoints();\n            }\n        }\n    }\n\n    remove() {\n        this.game.remove(this);\n    }\n}\n\nmodule.exports = Flea;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./javascripts/lib/flea.js\n// module id = 5\n// module chunks = 0","const Laser = require(\"./laser\");\nconst Mushroom = require(\"./mushroom\");\nconst Util = require(\"../src/util\");\n\nconst scorpion = new Image();\nscorpion.src = \"./images/scorpion.png\";\n\nconst bugDeath = new Audio(\"./sfx/bugDeath.mp4\");\n\nclass Scorpion {\n    constructor(context, canvasWidth, canvasHeight, x, y, game) {\n        this.context = context;\n        this.canvasWidth = canvasWidth;\n        this.canvasHeight = canvasHeight;\n        this.game = game;\n\n        this.image = scorpion;\n        this.x = x;\n        this.y = y;\n        this.sourceWidth = 16;\n        this.sourceHeight = 8;\n        this.width = 50;\n        this.height = 25;\n        this.sourceX = 0;\n        this.sourceY = 0;\n        this.radius = 30;\n\n        this.velocityX = -.1;\n\n        this.frames = 0;\n    }\n\n    draw() {\n        this.frames += 1;\n        if(this.frames === 300) {\n            this.frames = 0;\n            this.sourceX = (this.sourceX + this.sourceWidth) % 64\n        }\n        // (img, sx, sy, sw, sh, dx, dy, dw, dh)\n        this.context.drawImage(\n            this.image, this.sourceX, this.sourceY, this.sourceWidth, \n            this.sourceHeight, this.x, this.y, this.width, this.height\n        );\n    }\n\n    move() {\n        this.x += this.velocityX;\n        if (this.x < 0) {\n            this.remove();\n        }\n    }\n\n    isCollidedWith(otherObj) {\n        const centerDist = Util.dist([this.x, this.y], [otherObj.x, otherObj.y]);\n        return centerDist < (this.radius + otherObj.radius)\n    }\n\n    collideWith(otherObj) {\n        if(otherObj instanceof Laser) {\n            otherObj.remove();\n            this.remove();\n            bugDeath.play();\n            this.game.points += 1000;\n            this.game.checkPoints();\n        } else if(otherObj instanceof Mushroom) {\n            otherObj.poisoned = true;\n            otherObj.sourceY = 8;\n        }\n    }\n\n    remove() {\n        this.game.remove(this);\n    }\n}\n\nmodule.exports = Scorpion;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./javascripts/lib/scorpion.js\n// module id = 6\n// module chunks = 0","const Mushroom = require(\"./mushroom\");\nconst Laser = require(\"./laser\");\nconst Util = require(\"../src/util\");\n\nconst spider = new Image();\nspider.src = \"./images/spider.png\";\n\nconst bugDeath = new Audio(\"./sfx/bugDeath.mp4\");\n\nclass Spider {\n    constructor(context, canvasWidth, canvasHeight, x, y, game) {\n        this.context = context;\n        this.canvasWidth = canvasWidth;\n        this.canvasHeight = canvasHeight;\n        this.game = game;\n\n        this.image = spider;\n        this.x = x;\n        this.y = y;\n        this.sourceWidth = 16;\n        this.sourceHeight = 8;\n        this.width = 48;\n        this.height = 24;\n        this.sourceX = 0;\n        this.sourceY = 0;\n        this.radius = 20;\n\n        this.velocityX = .25;\n        if(this.x !== 0) this.velocityX = -.25;\n        this.velXTemp = this.velocityX;\n        this.velocityY = .4;\n\n        this.frames = 0;\n    }\n\n    draw() {\n        this.frames += 1;\n        if(this.frames === 200) {\n            this.sourceX = (this.sourceX + this.sourceWidth) % 64;\n        }\n        // (img, sx, sy, sw, sh, dx, dy, dw, dh)\n        this.context.drawImage(\n            this.image, this.sourceX, this.sourceY, this.sourceWidth, \n            this.sourceHeight, this.x, this.y, this.width, this.height\n        );\n    }\n\n    checkBounds() {\n        if(this.y > this.canvasHeight - this.height) {\n            this.y = this.canvasHeight - this.height;\n        }\n    }\n\n    move() {\n        if(this.frames % 300 === 0) {\n            this.velocityY = -this.velocityY;\n        } else if(this.frames % 1000 === 0) {\n            this.velocityX = this.velXTemp;\n            this.frames = 0;\n        }\n        Math.random() <= .5 ? this.velocityX = 0 : this.velocityX = this.velXTemp;\n\n        this.x += this.velocityX;\n        this.y += this.velocityY;\n        this.checkBounds();\n        if (this.x > this.canvasWidth + 100 || this.x < -100) {\n            this.remove();\n        }\n    }\n\n    isCollidedWith(otherObj) {\n        const centerDist = Util.dist([this.x, this.y], [otherObj.x, otherObj.y]);\n        return centerDist < (this.radius + otherObj.radius)\n    }\n\n    collideWith(otherObj) {\n        if(otherObj instanceof Laser) {\n            otherObj.remove();\n            this.remove();\n            bugDeath.play();\n            this.game.points += 600;\n            this.game.checkPoints();\n        } else if(otherObj instanceof Mushroom) {\n            if(Math.random() > 0.8) otherObj.remove();\n        }\n    }\n\n    remove() {\n        this.game.remove(this);\n    }\n}\n\nmodule.exports = Spider;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./javascripts/lib/spider.js\n// module id = 7\n// module chunks = 0","const Game = require(\"../lib/game\");\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const canvas = document.getElementById(\"centipede\");\n    const ctx = canvas.getContext(\"2d\");\n    const game = new Game(ctx);\n    game.start();\n})\n\n//This is a comment\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./javascripts/src/index.js\n// module id = 8\n// module chunks = 0","const GameView = require(\"./game_view\");\nconst Player = require(\"./player\");\nconst MovingObject = require(\"./moving_object\");\nconst CentipedeSegment = require(\"./centipede-segment\");\nconst Flea = require(\"./flea\");\nconst Scorpion = require(\"./scorpion\");\nconst Spider = require(\"./spider\");\nconst Mushroom = require(\"./mushroom\");\nconst Laser = require(\"./laser\");\nconst Util = require(\"../src/util\");\n\nclass Game {\n    constructor(context) {\n        this.DIM_X = 500;\n        this.DIM_Y = 750;\n        this.context = context;\n        this.isRunning = false;\n        this.gameView = new GameView(this.context, this.DIM_X, this.DIM_Y);\n        this.player = new Player(this.context, this.DIM_X, this.DIM_Y, this);\n        this.lasers = [];\n        this.mushrooms = [];\n        this.segments = [];\n        this.monsters = [];\n\n        this.level = 1;\n        this.lives = 3;\n        this.lives_gained = 0;\n        this.points = 0;\n        this.setMushrooms();\n        this.setCentipede();\n\n        this.bindKeyboardInput();\n\n        this.paused = false;\n    }\n\n    bindKeyboardInput() {\n        window.addEventListener(\"keydown\", event => {\n            if(event.code === \"Escape\") {\n                this.isRunning ? this.isRunning = false : this.isRunning = true;\n                this.paused = !this.paused;\n                this.context.fillStyle = \"yellow\";\n                this.context.font = \"30px Arial\";\n                this.context.fillText(`Pause`, this.DIM_X * .4, this.DIM_Y * .5);\n            }\n        })\n    }\n\n    allObjects() {\n        return [].concat(this.player, this.mushrooms, this.lasers, this.segments, this.monsters);\n    }\n\n    setMushrooms() {\n        for(let i = 0; i < 30; i++) {\n            let randX = Math.round((Math.random() * (this.DIM_X - 70) + 25) / 55) * 55;\n            let randY = Math.round((Math.random() * (this.DIM_Y * 0.66 - 38) + 45) / 55) * 55;\n            // Math.round((Math.random()*(max-min)+min)/10)*10;\n\n            while(this.mushrooms.some(mushroom => Util.dist([randX, randY], [mushroom.x, mushroom.y]) < 28)) {\n                randX = Math.round((Math.random() * (this.DIM_X - 70) + 25) / 55) * 55;\n                randY = Math.round((Math.random() * (this.DIM_Y * 0.66 - 38) + 45) / 55) * 55;\n            }\n\n            const mushroom = new Mushroom(this.context, this.DIM_X, this.DIM_Y, randX, randY, this);\n            this.mushrooms.push(mushroom);\n        }\n    }\n\n    setCentipede() {\n        let x = 20;\n        for(let i = 0; i < 12; i++) {\n            let newSegment;\n\n            if(i === 11) {\n                newSegment = new CentipedeSegment(this.context, this.DIM_X, this.DIM_Y, x, 15, this, true);\n            } else {\n                newSegment = new CentipedeSegment(this.context, this.DIM_X, this.DIM_Y, x, 15, this);\n            }\n\n            this.segments.push(newSegment);\n            x += 25;\n        }\n    }\n\n    collision() {\n        const allObjects = this.allObjects();\n        for(let i = 0; i < allObjects.length; i++) {\n            for(let j = 0; j < allObjects.length; j++) {\n                const obj1 = allObjects[i];\n                const obj2 = allObjects[j];\n\n                if(obj1.isCollidedWith(obj2)) {\n                    const collision = obj1.collideWith(obj2);\n                    if(collision) return;\n                }\n            }\n        }\n    }\n\n    remove(obj) {\n        if(obj instanceof Laser) {\n            this.lasers.splice(this.lasers.indexOf(obj), 1);\n        } else if (obj instanceof CentipedeSegment) {\n            this.segments.splice(this.segments.indexOf(obj), 1);\n        } else if (obj instanceof Mushroom) {\n            this.mushrooms.splice(this.mushrooms.indexOf(obj), 1);\n        } else if (obj instanceof Flea || obj instanceof Scorpion || obj instanceof Spider) {\n            this.monsters = [];\n        }\n    }\n\n    start() {\n        this.startScreen();\n    }\n\n    runGameLoop() {\n        if(this.lives === 0) {\n            this.context.clearRect(0, 0, this.DIM_X, this.DIM_Y);\n            this.gameView.draw();\n            this.gameoverScreen();\n        } else {\n            if(this.isRunning) {\n                this.updateGameState();\n                this.draw();\n                let me = this;\n                window.setInterval(() => {\n                    me.runGameLoop();\n                }, 10);\n            }\n        }\n    }\n\n    updateGameState() {\n        this.allObjects().forEach((obj) => {\n            obj.move();\n        })\n        this.collision();\n        if(this.segments.length === 0) {\n            this.level += 1;\n            this.setCentipede();\n        }\n        this.setMonster();\n    }\n\n    setMonster() {\n        if(this.monsters.length === 0) {\n            let randNum = Math.floor(Math.random() * 1000);\n            if(randNum === 13) {\n                if(this.mushrooms.length <= 15 && this.monsters.length === 0) {\n                    this.setFlea();\n                } else {\n                    Math.random() >= 0.5 ? this.setSpider() : this.setScorpion();\n                }\n            }\n        }\n    }\n\n    setFlea() {\n        let randX = Math.round((Math.random() * (this.DIM_X - 50) + 20) / 65) * 65;\n        let posY = 0;\n        this.monsters.push(new Flea(this.context, this.DIM_X, this.DIM_Y, posX, posY, this));\n    }\n\n    setScorpion() {\n        let posX = this.DIM_X;\n        let posY = Math.floor(Math.random() * (this.DIM_Y - 130)) + 80;\n        this.monsters.push(new Scorpion(this.context, this.DIM_X, this.DIM_Y, posX, posY, this));\n    }\n\n    setSpider() {\n        let posX = 0;\n        if(Math.random() >= .5) posX = this.DIM_X;\n        let posY = Math.floor(Math.random() * (this.DIM_Y - (this.DIM_Y / 2))) + (this.DIM_Y / 3);\n        this.monsters.push(new Spider(this.context, this.DIM_X, this.DIM_Y, posX, posY, this));\n    }\n\n    draw() {\n        this.context.clearRect(0, 0, this.DIM_X, this.DIM_Y);\n        this.gameView.draw();\n\n        this.allObjects().forEach((obj) => {\n            obj.draw(this.context);\n        })\n        this.context.fillStyle = \"#FFA500\";\n        this.context.font = \"20px Arial\";\n        this.context.fillText(`Level ${this.level}  Lives: ${this.lives}`, 20, 30);\n        this.context.fillText(`Points: ${this.points}`, 380, 30);\n\n        if(this.paused) {\n            this.context.fillStyle = \"yellow\";\n            this.context.font = \"48px Arial\";\n            this.context.fillText(`Pause`, this.DIM_X * .45, this.DIM_Y * .5);\n        }\n    }\n\n    checkPoints() {\n        if(Math.floor(this.points / 10000) > this.lives_gained) {\n            this.lives += 1;\n            this.lives_gained += 1;\n        }\n    }\n\n    startScreen() {\n        this.gameView.draw();\n        this.context.fillStyle = \"yellow\";\n        this.context.font = \"48px Arial\";\n        this.context.fillText(`CENTIPEDE`, this.DIM_X * .25, this.DIM_Y * .38);\n        this.context.font = \"24px Arial\";\n        this.context.fillText(\"Press any key to start\", this.DIM_X * .28, this.DIM_Y * .5);\n\n        document.addEventListener(\"keydown\", () => {\n            this.isRunning = true;\n            this.paused = false;\n            this.runGameLoop();\n        })\n    }\n\n    gameoverScreen() {\n        this.isRunning = false;\n\n        this.gameView.draw();\n        this.context.fillStyle = \"yellow\";\n        this.context.font = \"48px Arial\";\n        this.context.fillText(`GAME OVER`, this.DIM_X * .23, this.DIM_Y * .38);\n        this.context.font = \"26px Arial\";\n        this.context.fillText(`Points: ${this.points}`, this.DIM_X * .25, this.DIM_Y * .53)\n        this.context.font = \"24px Arial\";\n        this.context.fillText(\"Press any key to try again\", this.DIM_X * .25, this.DIM_Y * .6);\n        \n        document.addEventListener(\"keydown\", () => {\n            this.isRunning = true;\n            this.paused = false\n        })\n\n        this.lasers = [];\n        this.mushrooms = [];\n        this.segments = [];\n        this.monsters = [];\n\n        this.level = 1;\n        this.lives = 3;\n        this.lives_gained = 0;\n        this.points = 0;\n        this.setMushrooms();\n        this.setCentipede();\n    }\n}\n\nmodule.exports = Game;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./javascripts/lib/game.js\n// module id = 9\n// module chunks = 0","class GameView {\n    constructor(context, width, height) {\n        this.context = context;\n        this.width = width;\n        this.height = height;\n    }\n\n    draw() {\n        this.context.fillStyle = \"#000000\";\n        this.context.beginPath();\n        this.context.fillRect(0, 0, this.width, this.height);\n    }\n}\n\nmodule.exports = GameView;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./javascripts/lib/game_view.js\n// module id = 10\n// module chunks = 0","const CentipedeSegment = require(\"./centipede-segment\");\nconst Flea = require(\"./flea\");\nconst Scorpion = require(\"./scorpion\");\nconst Spider = require(\"./spider\");\nconst Mushroom = require(\"./mushroom\");\nconst Laser = require(\"./laser\");\nconst Util = require(\"../src/util\");\n\nconst ship = new Image();\nship.src = \"./images/ship.png\";\nconst playerHeight = 35;\nconst playerWidth = 28;\n\nconst laserBlast = new Audio(\"./sfx/laser.mp4\");\nconst explosion = new Audio(\"./sfx/explosion.mp4\");\n\nclass Player {\n    constructor(context, canvasWidth, canvasHeight, game) {\n        this.context = context;\n        this.canvasWidth = canvasWidth;\n        this.canvasHeight = canvasHeight;\n        this.game = game;\n        this.x = (this.canvasWidth - playerWidth) / 2;\n        this.y = this.canvasHeight - playerHeight - 10;\n        this.velocityX = 0;\n        this.velocityY = 0;\n\n        this.radius = 15;\n        this.image = ship;\n        this.bindKeyboardInput();\n        this.rightDown = false;\n        this.leftDown = false;\n        this.upDown = false;\n        this.downDown = false;\n    }\n\n    bindKeyboardInput() {\n        window.addEventListener(\"keydown\", event => {\n            if(event.key === \"ArrowLeft\") {\n                this.velocityX = -.4;\n            } \n            if(event.key === \"ArrowRight\") {\n                this.velocityX = .4;\n            }\n            if(event.key === \"ArrowUp\") {\n                this.velocityY = -.4;\n            }\n            if(event.key === \"ArrowDown\") {\n                this.velocityY = .4;\n            }\n            if (event.code === \"Space\") {\n                let laser = new Laser(this.context, this.canvasWidth, this.canvasHeight, this, this.game);\n                this.game.lasers.push(laser);\n                laserBlast.play();\n            }\n            this.checkBounds();\n        });\n\n        window.addEventListener(\"keyup\", event => {\n            if(event.key === \"ArrowLeft\") {\n                this.velocityX = 0;\n            } \n            if(event.key === \"ArrowRight\") {\n                this.velocityX = 0;\n            }\n            if(event.key === \"ArrowUp\") {\n                this.velocityY = 0;\n            }\n            if(event.key === \"ArrowDown\") {\n                this.velocityY = 0;\n            }\n        });\n    }\n\n    checkBounds() {\n        // set player boundaries\n        if (this.x < 0) {\n            this.x = 0;\n        } else if (this.x > this.canvasWidth - playerWidth) {\n            this.x = this.canvasWidth - playerWidth;\n        } else if (this.y < 0) {\n            this.y = 0;\n        } else if (this.y > this.canvasHeight - playerHeight) {\n            this.y = this.canvasHeight - playerHeight;\n        }\n    }\n\n    isCollidedWith(otherObj) {\n        const centerDist = Util.dist([this.x, this.y], [otherObj.x, otherObj.y]);\n        return centerDist < (this.radius + otherObj.radius)\n    }\n\n    collideWith(otherObj) {\n        if(otherObj instanceof CentipedeSegment || otherObj instanceof Spider || otherObj instanceof Flea || otherObj instanceof Scorpion) {\n            explosion.play();\n            this.game.lives -= 1;\n            this.x = (this.canvasWidth - playerWidth) / 2;\n            this.y = this.canvasHeight - playerHeight - 10;\n        } else if(otherObj instanceof Mushroom) {\n            if(otherObj.x > this.x + otherObj.width) {\n                console.log(\"mushroom to the right\")\n                this.x = otherObj.x - playerWidth - 8;\n            } else if(otherObj.x < this.x - otherObj.width) {\n                console.log(\"mushroom to the left\")\n                this.x = otherObj.x + otherObj.width + 7;\n            } else if(otherObj.y > this.y + otherObj.height) {\n                console.log(\"mushroom below\")\n                this.y = otherObj.y - playerHeight - 5;\n            } else if(otherObj.y < this.y - otherObj.height) {\n                console.log(\"mushroom above\")\n                this.y = otherObj.y + otherObj.height + 6;\n            }\n        }\n    }\n\n    move() {\n        this.x += this.velocityX;\n        this.y += this.velocityY;\n        this.checkBounds();\n    }\n\n    draw() {\n        this.context.drawImage(this.image, this.x, this.y, playerWidth, playerHeight);\n    }\n}\n\nmodule.exports = Player;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./javascripts/lib/player.js\n// module id = 11\n// module chunks = 0"],"sourceRoot":""}